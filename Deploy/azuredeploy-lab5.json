{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",   
    "variables": {        

        "UniqueSuffix":"[uniqueString(resourceGroup().id)]",       
        
        "ADPEventHubsName": "[concat('ADPEventHubs-', substring(variables('UniqueSuffix'),0,5))]",
        "ADPEventHubsSKU": "Standard",
        "ADPEventHubsThroughputUnits": 1,

        "ADPStreamAnalyticsName": "[concat('SynapseStreamAnalytics-',substring(variables('UniqueSuffix'),0,5))]",
        "ADPStreamAnalyticsSKU": "Standard",

        "ADPKeyVaultName": "[concat('ADPKeyVault-',substring(variables('UniqueSuffix'),0,5))]",

        "ADPLogicAppName": "ADPLogicApp",        
		
		"ADPIntegrationAccountName": "ADPIntegrationAccount",
		
		"ADPEventHubConnectionName": "EventHubAPIConnection",
		"ADPEventHubAuthPolicyID": "[resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('ADPEventHubsName'), 'RootManageSharedAccessKey')]",
		"ADPEventHubsAPIVersion": "[providers('Microsoft.Eventhub','namespaces').apiVersions[0]]"
    },
    "resources": [       
         {
            "type": "Microsoft.EventHub/namespaces",
            "sku": {
                "name": "[variables('ADPEventHubsSKU')]",
                "tier": "[variables('ADPEventHubsSKU')]",
                "capacity": "[variables('ADPEventHubsThroughputUnits')]"
            },
            "name": "[variables('ADPEventHubsName')]",
            "apiVersion": "2017-04-01",
            "location": "[resourceGroup().location]",
            "tags": {},
            "scale": null,
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            },
            "dependsOn": [],
			"resources": [
				{
					"type": "Microsoft.EventHub/namespaces/AuthorizationRules",
					"apiVersion": "2017-04-01",
					"name": "[concat(variables('ADPEventHubsName'), '/RootManageSharedAccessKey')]",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.EventHub/namespaces', variables('ADPEventHubsName'))]"
					],
					"properties": {
						"rights": [
							"Listen",
							"Manage",
							"Send"
						]
					}
				},
				{
					"type": "Microsoft.EventHub/namespaces/eventhubs",
					"apiVersion": "2017-04-01",
					"name": "[concat(variables('ADPEventHubsName'), '/nysestocktrade')]",
					"location": "Australia East",
					"dependsOn": [
						"[resourceId('Microsoft.EventHub/namespaces', variables('ADPEventHubsName'))]"
					],
					"properties": {
						"messageRetentionInDays": 1,
						"partitionCount": 1,
						"status": "Active"
					}
				}
			]
        },
        {
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "name": "[variables('ADPStreamAnalyticsName')]",
            "apiVersion": "2017-04-01-preview",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "sku": {
                    "name": "[variables('ADPStreamAnalyticsSKU')]"
                },
                "eventsOutOfOrderPolicy": "Adjust",
                "outputErrorPolicy": "Stop",
                "eventsOutOfOrderMaxDelayInSeconds": 0,
                "eventsLateArrivalMaxDelayInSeconds": 5,
                "dataLocale": "en-US",
                "jobType": "Cloud",
                "inputs": [],
                "transformation": {
                    "name": "Transformation",
                    "properties": {
                        "query": "SELECT\r\n    *\r\nINTO\r\n    [YourOutputAlias]\r\nFROM\r\n    [YourInputAlias]",
                        "streamingUnits": 3
                    }
                },
                "compatibilityLevel": "1.1"
            },
            "dependsOn": []
        },
		{
            "type": "Microsoft.Logic/integrationAccounts",
            "apiVersion": "2016-06-01",
            "name": "[variables('ADPIntegrationAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "state": "Enabled"
            }
        },
		{
			"type": "Microsoft.Logic/workflows",
			"apiVersion": "2017-07-01",
			"name": "[variables('ADPLogicAppName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"state": "Disabled",
				"integrationAccount": {
					"id": "[resourceId('Microsoft.Logic/integrationAccounts', variables('ADPIntegrationAccountName'))]"
				},
				"definition": {
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {
						"$connections": {
							"defaultValue": {},
							"type": "Object"
						}
					},
					"triggers": {
						"Recurrence": {
							"recurrence": {
								"frequency": "Second",
								"interval": 1
							},
							"type": "Recurrence"
						}
					},
					"actions": {
						"Initialize_Config_Settings": {
							"runAfter": {},
							"type": "Compose",
							"inputs": {
								"numberOfMessages": 10,
								"priceRangeMax": 100,
								"priceRangeMin": 70,
								"quantityRangeMax": 300,
								"quantityRangeMin": 100,
								"stockTickers": [
									"MSFT",
									"AMZN",
									"GOOGL",
									"FB",
									"TWTR"
								]
							}
						},
						"Initialize_messageCount": {
							"runAfter": {
								"Parse_Config_Settings": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "messageCount",
										"type": "Integer",
										"value": 1
									}
								]
							}
						},
						"Parse_Config_Settings": {
							"runAfter": {
								"Initialize_Config_Settings": [
									"Succeeded"
								]
							},
							"type": "ParseJson",
							"inputs": {
								"content": "@outputs('Initialize_Config_Settings')",
								"schema": {
									"properties": {
										"numberOfMessages": {
											"type": "integer"
										},
										"priceRangeMax": {
											"type": "integer"
										},
										"priceRangeMin": {
											"type": "integer"
										},
										"quantityRangeMax": {
											"type": "integer"
										},
										"quantityRangeMin": {
											"type": "integer"
										},
										"stockTickers": {
											"items": {
												"type": "string"
											},
											"type": "array"
										}
									},
									"type": "object"
								}
							}
						},
						"Until_numberOfMessages_is_achieved": {
							"actions": {
								"Capture_Stock_Trade_Message": {
									"runAfter": {
										"Generate_Stock_Trade_Message": [
											"Succeeded"
										]
									},
									"type": "Compose",
									"inputs": "@outputs('Generate_Stock_Trade_Message')?['body']"
								},
								"Generate_Stock_Trade_Message": {
									"runAfter": {},
									"type": "JavaScriptCode",
									"inputs": {
										"code": "var configSettings = workflowContext.actions.Initialize_Config_Settings.outputs;\r\n\r\nstockTickerIndex = Math.round(Math.random()*100) % configSettings.stockTickers.length;\r\n\r\nvar stockTrade = {\r\n    StockTicker: configSettings.stockTickers[stockTickerIndex]\r\n    , Quantity: Math.round(configSettings.quantityRangeMin + (configSettings.quantityRangeMax - configSettings.quantityRangeMin)*Math.random())\r\n    , Price: configSettings.priceRangeMin + (configSettings.priceRangeMax - configSettings.priceRangeMin)*Math.random()\r\n    , TradeTimestamp: new Date().toJSON()\r\n};\r\n\r\nreturn stockTrade;"
									}
								},
								"Increment_messageCount": {
									"runAfter": {
										"Send_event_to_NYSEStockTradeSimm_Event_Hub": [
											"Succeeded"
										]
									},
									"type": "IncrementVariable",
									"inputs": {
										"name": "messageCount",
										"value": 1
									}
								},
								"Send_event_to_NYSEStockTradeSimm_Event_Hub": {
									"runAfter": {
										"Capture_Stock_Trade_Message": [
											"Succeeded"
										]
									},
									"type": "ApiConnection",
									"inputs": {
										"body": {
                                            "ContentData": "@{base64(outputs('Capture_Stock_Trade_Message'))}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['eventhubs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/@{encodeURIComponent('nysestocktrade')}/events"
									}
								}
							},
							"runAfter": {
								"Initialize_messageCount": [
									"Succeeded"
								]
							},
							"expression": "@greater(variables('messageCount'), rand(1, body('Parse_Config_Settings')?['numberOfMessages']))",
							"limit": {
								"count": 60,
								"timeout": "PT1H"
							},
							"type": "Until"
						}
					},
					"outputs": {}
				},
				"parameters": {
					"$connections": {
                        "value": {
                            "eventhubs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections',variables('ADPEventHubConnectionName'))]",
                                "connectionName": "[variables('ADPEventHubConnectionName')]",
                                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/eventhubs')]"
                            }
                        }
                    }
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.Logic/integrationAccounts', variables('ADPIntegrationAccountName'))]",
				"[resourceId('Microsoft.Web/connections', variables('ADPEventHubConnectionName'))]"
			]
		},
		{
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('ADPEventHubConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[variables('ADPEventHubConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId ,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/eventhubs')]"
                },
				"parameterValues":{
					"connectionString": "[listkeys(variables('ADPEventHubAuthPolicyID'), '2017-04-01').primaryConnectionString]"
				}
            }
        }        
    ]
}